#!/usr/bin/env python3
"""
Healthcare Excel to CSV Transformer - VERSION 2025 CORRECTED

Ce script transforme les donn√©es Excel de sant√© (format matrice LBS) 
vers le format CSV requis par le tableau de bord `analytique_sante`.

Il identifie automatiquement l'ann√©e √† partir du nom du fichier Excel
et la ligne d'en-t√™te de mani√®re dynamique.
"""

import pandas as pd
import numpy as np
import os
import sys
import re
from pathlib import Path
from typing import Dict, List, Optional, Any, Union

class HealthcareExcelTransformer:
    """
    Transforme les donn√©es Excel de sant√© vers le format CSV du dashboard.
    
    Cette classe g√®re l'ensemble du pipeline de transformation :
    - D√©tection dynamique de l'ann√©e et de l'en-t√™te
    - Nettoyage et standardisation des noms de colonnes et de services
    - Exportation des donn√©es transform√©es en un fichier CSV
    """
    
    SERVICE_STANDARD: Dict[str, str] = {
        r"Nombre de consultants(?!.*<)": "Nb Consultants",
        r"Nombre de consultants.*< *5": "Nb Consultants <5 ans",
        r"Nombre de consultations(?!.*<)": "Nb Consultations",
        r"Nombre de consultations.*< *5": "Nb Consultations <5 ans",
        r"Accouchement.*√©tablissement": "Accouchements",
        r"Naissances vivantes": "Naissances vivantes",
        r"TOTAL PALUDISME": "Paludisme",
        r"TOTAL IRA": "Infections Respiratoires",
        r"TOTAL DIARRHEES": "Diarrh√©es",
        r"clients d√©pist√©s TOTAL": "D√©pistage Total",
        r"Femme.*d√©pist√©e VIH": "Femmes VIH+",
        r"TOTAL CONSULTATION PF": "Consultations PF",
        r"TDR positifs": "TDR Paludisme Positifs",
        r"TOTAUX MORBIDITE": "Morbidit√© Totale",
        r"DECES": "D√©c√®s",
        r"Cas r√©f√©r√©s": "R√©f√©r√©s",
        r"Femmes.*vaccin√©es.*VAT": "Femmes Vaccin√©es VAT"
    }
    
    SERVICES_CLES: List[str] = list(SERVICE_STANDARD.values())
    
    def __init__(self) -> None:
        """Initialise une nouvelle instance du transformateur."""
        self.original_data: Optional[pd.DataFrame] = None
        self.transformed_data: Optional[pd.DataFrame] = None
        self.year: Optional[str] = None
        self.header_row_index: Optional[int] = None
        # Mapping am√©lior√© des mois
        self.month_mapping: Dict[str, str] = {
            # Fran√ßais
            'JANVIER': 'January', 'JANV': 'January', 'JAN': 'January',
            'FEVRIER': 'February', 'F√âVRIER': 'February', 'FEV': 'February', 'F√âV': 'February', 'FEB': 'February',
            'MARS': 'March', 'MAR': 'March',
            'AVRIL': 'April', 'AVR': 'April', 'APR': 'April',
            'MAI': 'May',
            'JUIN': 'June', 'JUN': 'June',
            'JUILLET': 'July', 'JUIL': 'July', 'JUL': 'July',
            'AOUT': 'August', 'AO√õT': 'August', 'AOU': 'August', 'AUG': 'August',
            'SEPTEMBRE': 'September', 'SEPTEM': 'September', 'SEPT': 'September', 'SEP': 'September',
            'OCTOBRE': 'October', 'OCTOB': 'October', 'OCT': 'October',
            'NOVEMBRE': 'November', 'NOVEM': 'November', 'NOV': 'November',
            'DECEMBRE': 'December', 'D√âCEMBRE': 'December', 'DECEM': 'December', 'DEC': 'December', 'D√âCEM': 'December',
            # Anglais (au cas o√π)
            'JANUARY': 'January', 'FEBRUARY': 'February', 'MARCH': 'March',
            'APRIL': 'April', 'MAY': 'May', 'JUNE': 'June',
            'JULY': 'July', 'AUGUST': 'August', 'SEPTEMBER': 'September',
            'OCTOBER': 'October', 'NOVEMBER': 'November', 'DECEMBER': 'December'
        }
        self.service_col_name: str = ''
        
    def _find_header_row(self, df: pd.DataFrame) -> int:
        """
        D√©tecte la ligne d'en-t√™te contenant les noms de mois.
        
        Args:
            df (pd.DataFrame): Le DataFrame brut charg√©.
            
        Returns:
            int: L'index de la ligne d'en-t√™te.
        """
        for i, row in df.iterrows():
            row_str = ' '.join(str(cell).upper() for cell in row.fillna(''))
            # Recherche des mots-cl√©s de mois fran√ßais
            month_keywords = ['JANVIER', 'FEVRIER', 'F√âVRIER', 'MARS', 'AVRIL', 'MAI', 'JUIN']
            matches = sum(1 for keyword in month_keywords if keyword in row_str)
            
            if matches >= 3:  # Au moins 3 mois d√©tect√©s
                print(f"‚úÖ Ligne d'en-t√™te d√©tect√©e √† l'index: {i} (Excel Row: {i+1}) avec {matches} mois d√©tect√©s.")
                return i
                
        print("‚ö† Aucune ligne d'en-t√™te valide d√©tect√©e. Utilisation de la premi√®re ligne.")
        return 0
        
    def _find_service_column(self, df: pd.DataFrame) -> str:
        """
        Identifie la colonne de service.
        
        Args:
            df (pd.DataFrame): Le DataFrame avec la bonne ligne d'en-t√™te.
            
        Returns:
            str: Le nom de la colonne de service.
        """
        # Priorit√© : une colonne avec un nom explicite comme 'service'
        for col in df.columns:
            if 'service' in str(col).lower():
                print(f"‚úÖ Colonne de service identifi√©e par nom: '{col}'")
                return col
        
        # Deuxi√®me priorit√© : premi√®re colonne non-num√©rique
        for col in df.columns:
            if df[col].dtype == 'object':
                # V√©rifier si cette colonne contient des services potentiels
                sample_values = df[col].dropna().astype(str).str.strip()
                non_empty_values = sample_values[sample_values != ''].head(10)
                
                if len(non_empty_values) > 0:
                    print(f"‚úÖ Colonne de service identifi√©e: '{col}' (contient du texte)")
                    return col
        
        # Derni√®re option : la premi√®re colonne
        print(f"‚ö†Ô∏è Colonne de service par d√©faut: '{df.columns[0]}'")
        return df.columns[0]

    def _standardize_month_names(self, df: pd.DataFrame) -> pd.DataFrame:
        """Standardise les noms de mois dans les colonnes."""
        new_columns = []
        for col in df.columns:
            col_upper = str(col).strip().upper()
            # Rechercher une correspondance dans le mapping des mois
            standardized = self.month_mapping.get(col_upper, col)
            new_columns.append(standardized)
        
        df.columns = new_columns
        return df

    def load_original_data(self, file_path: Union[str, Path]) -> bool:
        """
        Charge et pr√©pare les donn√©es brutes d'un fichier Excel.
        
        Args:
            file_path (Union[str, Path]): Le chemin vers le fichier Excel.
            
        Returns:
            bool: True si le chargement a r√©ussi, False sinon.
        """
        try:
            print(f"üìñ Chargement des donn√©es Excel: {file_path}")
            
            # Extraction de l'ann√©e du nom de fichier
            year_match = re.search(r'(\d{4})', Path(file_path).stem)
            if year_match:
                self.year = year_match.group(1)
                print(f"‚úÖ Ann√©e d√©tect√©e: {self.year}")
            else:
                self.year = '2023'  # Valeur par d√©faut
                print("‚ö†Ô∏è Ann√©e non d√©tect√©e, utilisation de 2023 par d√©faut.")

            # Chargement temporaire pour d√©tecter l'en-t√™te
            df_temp = pd.read_excel(file_path, header=None)
            print(f"üìä Dimensions du fichier: {df_temp.shape}")
            
            # Affichage des premi√®res lignes pour debug
            print("üîç Aper√ßu des premi√®res lignes:")
            for i in range(min(5, len(df_temp))):
                print(f"  Ligne {i}: {list(df_temp.iloc[i].dropna())[:10]}")  # Premi√®re 10 colonnes non-vides
            
            self.header_row_index = self._find_header_row(df_temp)
            
            # Chargement final avec l'en-t√™te correcte
            self.original_data = pd.read_excel(file_path, header=self.header_row_index)
            
            # Nettoyage des noms de colonnes
            self.original_data.columns = [str(col).strip() for col in self.original_data.columns]
            
            print(f"‚úÖ Donn√©es charg√©es: {len(self.original_data)} lignes, {len(self.original_data.columns)} colonnes")
            print(f"üìã Colonnes d√©tect√©es: {list(self.original_data.columns)[:10]}...")  # Premi√®re 10 colonnes
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement du fichier Excel: {e}")
            import traceback
            traceback.print_exc()
            return False

    def transform(self) -> Optional[pd.DataFrame]:
        """
        Transforme les donn√©es de format large (matrice) en format long (tableau).
        
        Returns:
            Optional[pd.DataFrame]: Le DataFrame transform√©, ou None en cas d'√©chec.
        """
        if self.original_data is None:
            print("‚ùå Donn√©es originales non charg√©es.")
            return None
            
        print("üîÑ D√©but de la transformation...")
        df = self.original_data.copy()
        
        try:
            # 1. Standardiser les noms de mois
            df = self._standardize_month_names(df)
            print(f"üìã Colonnes apr√®s standardisation: {list(df.columns)}")
            
            # 2. Identifier la colonne de service
            self.service_col_name = self._find_service_column(df)
            
            # 3. Identifier les colonnes de mois
            month_names = {'January', 'February', 'March', 'April', 'May', 'June',
                          'July', 'August', 'September', 'October', 'November', 'December'}
            
            value_cols = [col for col in df.columns if col in month_names]
            print(f"üìÖ Colonnes de mois identifi√©es: {value_cols}")
            
            if not value_cols:
                print("‚ùå Aucune colonne de mois d√©tect√©e!")
                print("üîç Colonnes disponibles:", list(df.columns))
                return pd.DataFrame()

            # 4. Nettoyer les donn√©es avant la transformation
            print("üßπ Nettoyage des donn√©es...")
            
            # Supprimer les lignes vides dans la colonne service
            df_clean = df[df[self.service_col_name].notna() & 
                         (df[self.service_col_name].astype(str).str.strip() != '')].copy()
            
            print(f"üìä Lignes apr√®s nettoyage: {len(df_clean)}")
            
            if len(df_clean) == 0:
                print("‚ùå Aucune donn√©e valide apr√®s nettoyage!")
                return pd.DataFrame()

            # Remplacer les valeurs non num√©riques par NaN dans les colonnes de mois
            for col in value_cols:
                if col in df_clean.columns:
                    df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce')

            # 5. Transformation (melt)
            print("üîÄ Transformation en format long...")
            df_melted = df_clean.melt(
                id_vars=[self.service_col_name], 
                value_vars=value_cols,
                var_name='month', 
                value_name='valeur'
            )
            
            print(f"üìä Donn√©es apr√®s melt: {len(df_melted)} lignes")
            
            # 6. Supprimer les valeurs nulles
            df_melted = df_melted.dropna(subset=['valeur'])
            print(f"üìä Donn√©es apr√®s suppression des NaN: {len(df_melted)} lignes")
            
            # 7. Cr√©er la colonne date
            print("üìÖ Cr√©ation des dates...")
            df_melted['date'] = pd.to_datetime(
                df_melted['month'] + ' 1, ' + self.year, 
                format='%B %d, %Y',
                errors='coerce'
            )
            
            # Supprimer les dates invalides
            df_melted = df_melted.dropna(subset=['date'])
            print(f"üìä Donn√©es apr√®s cr√©ation des dates: {len(df_melted)} lignes")
            
            # 8. Formater et finaliser
            if len(df_melted) > 0:
                df_melted['date'] = df_melted['date'].dt.strftime('%Y-%m-%d')
                
                # Renommer et s√©lectionner les colonnes finales
                self.transformed_data = df_melted.rename(columns={
                    self.service_col_name: 'SERVICE'
                })[['date', 'SERVICE', 'valeur']].copy()
                
                # Filtrer les services non vides
                self.transformed_data = self.transformed_data[
                    self.transformed_data['SERVICE'].astype(str).str.strip() != ''
                ]
                
                print(f"‚úÖ Transformation r√©ussie: {len(self.transformed_data)} lignes")
                print("üìã Aper√ßu des services:")
                for service in self.transformed_data['SERVICE'].unique()[:10]:
                    count = len(self.transformed_data[self.transformed_data['SERVICE'] == service])
                    print(f"  - {service}: {count} points de donn√©es")
                
                return self.transformed_data
            else:
                print("‚ùå Aucune donn√©e valide apr√®s transformation!")
                return pd.DataFrame()

        except Exception as e:
            print(f"‚ùå Erreur lors de la transformation: {e}")
            import traceback
            traceback.print_exc()
            return None

    def save_transformed_data(self, output_path: Union[str, Path]) -> bool:
        """
        Sauvegarde le DataFrame transform√© dans un fichier CSV.
        
        Args:
            output_path (Union[str, Path]): Le chemin d'enregistrement du fichier CSV.
            
        Returns:
            bool: True si la sauvegarde a r√©ussi, False sinon.
        """
        if self.transformed_data is None or self.transformed_data.empty:
            print("‚ùå Aucune donn√©e transform√©e √† sauvegarder.")
            return False
            
        try:
            self.transformed_data.to_csv(output_path, index=False)
            print(f"‚úÖ Fichier CSV sauvegard√©: {output_path}")
            print(f"üìä Contenu sauvegard√©: {len(self.transformed_data)} lignes")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return False

def main():
    """Fonction principale pour l'ex√©cution du script en ligne de commande."""
    if len(sys.argv) < 2:
        print("Usage: python csv_transformer_script.py <fichier_excel> [fichier_csv_sortie]")
        sys.exit(1)

    input_file_path = sys.argv[1]
    
    if len(sys.argv) > 2:
        output_file_path = sys.argv[2]
    else:
        output_file_path = f"{Path(input_file_path).stem}_transformed.csv"
        
    transformer = HealthcareExcelTransformer()
    
    if transformer.load_original_data(input_file_path):
        transformed_df = transformer.transform()
        if transformed_df is not None and not transformed_df.empty:
            transformer.save_transformed_data(output_file_path)
        else:
            print("‚ùå La transformation a √©chou√© - aucune donn√©e √† sauvegarder")

if __name__ == "__main__":
    main()