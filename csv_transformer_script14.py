#!/usr/bin/env python3
"""
Healthcare Excel to CSV Transformer - VERSION 2025
=================================================

Ce script transforme les donn√©es Excel de sant√© (format matrice LBS) 
vers le format CSV requis par le tableau de bord analytique_sante.

Il identifie automatiquement l'ann√©e √† partir du nom du fichier Excel
et la ligne d'en-t√™te de mani√®re dynamique.
"""

import pandas as pd
import numpy as np
import os
import sys
import re
from pathlib import Path

class HealthcareExcelTransformer:
    """Transforme les donn√©es Excel de sant√© vers le format CSV du dashboard"""
    
    # Dictionnaire de standardisation des noms de services
    SERVICE_STANDARD = {
        r"Nombre de consultants(?!.*<)": "Nb Consultants",
        r"Nombre de consultants.*< *5": "Nb Consultants <5 ans",
        r"Nombre de consultations(?!.*<)": "Nb Consultations",
        r"Nombre de consultations.*< *5": "Nb Consultations <5 ans",
        r"Accouchement.*√©tablissement": "Accouchements",
        r"Naissances vivantes": "Naissances vivantes",
        r"TOTAL PALUDISME": "Paludisme",
        r"TOTAL IRA": "Infections Respiratoires",
        r"TOTAL DIARRHEES": "Diarrh√©es",
        r"clients d√©pist√©s TOTAL": "D√©pistage Total",
        r"Femme.*d√©pist√©e VIH": "Femmes VIH+",
        r"TOTAL CONSULTATION PF": "Consultations PF",
        r"TDR positifs": "TDR Paludisme Positifs",
        r"TOTAUX MORBIDITE": "Morbidit√© Totale",
        r"DECES": "D√©c√®s",
        r"Cas r√©f√©r√©s": "R√©f√©r√©s",
        r"Femmes.*vaccin√©es.*VAT": "Femmes Vaccin√©es VAT"
    }
    
    SERVICES_CLES = list(SERVICE_STANDARD.values())
    
    def __init__(self):
        self.original_data = None
        self.transformed_data = None
        self.year = None
        self.header_row_index = None
        
        # Mapping des colonnes avec toutes les variantes possibles
        self.column_mapping = {
            # Mapping Excel headers ‚Üí CSV headers avec variantes
            'JANVIER': 'JANVIER',
            'JAN': 'JANVIER',
            'JANUARY': 'JANVIER',
            'JANV': 'JANVIER',
            
            'FEVRIER': 'FEVRIER',
            'FEV': 'FEVRIER',
            'FEBRUARY': 'FEVRIER',
            'F√âVRIER': 'FEVRIER',
            'FEB': 'FEVRIER',
            
            'MARS': 'MARS',
            'MAR': 'MARS',
            'MARCH': 'MARS',
            
            'T1': 'T1',
            'TRIM1': 'T1',
            'TRIMESTRE1': 'T1',
            
            'AVRIL': 'AVRIL',
            'AVR': 'AVRIL',
            'APRIL': 'AVRIL',
            'APR': 'AVRIL',
            
            'MAI': 'MAI',
            'MAY': 'MAI',
            
            'JUIN': 'JUIN',
            'JUN': 'JUIN',
            'JUNE': 'JUIN',
            
            'T2': 'T2',
            'TRIM2': 'T2',
            'TRIMESTRE2': 'T2',
            
            'S1': 'S1',
            'SEMESTRE1': 'S1',
            
            'JUILLET': 'JUILLET',
            'JUL': 'JUILLET',
            'JULY': 'JUILLET',
            
            'AO√õT': 'AO√õT',
            'AOUT': 'AO√õT',
            'AUG': 'AO√õT',
            'AUGUST': 'AO√õT',
            
            'SEPTEM': 'SEPTEMBRE',
            'SEPTEMBRE': 'SEPTEMBRE',
            'SEPT': 'SEPTEMBRE',
            'SEPTEMBER': 'SEPTEMBRE',
            'SEP': 'SEPTEMBRE',
            
            'T3': 'T3',
            'TRIM3': 'T3',
            'TRIMESTRE3': 'T3',
            'T3 TO': 'T3 TO',
            'T3.1': 'T3 TO',
            'T3_2': 'T3 TO',
            
            'OCTOB': 'OCTOBRE',
            'OCTOBRE': 'OCTOBRE',
            'OCT': 'OCTOBRE',
            'OCTOBER': 'OCTOBRE',
            
            'NOVEM': 'NOVEMBRE',
            'NOVEMBRE': 'NOVEMBRE',
            'NOV': 'NOVEMBRE',
            'NOVEMBER': 'NOVEMBRE',
            
            'D√âCEM': 'D√âCEMBRE',
            'DECEM': 'D√âCEMBRE',
            'D√âCEMBRE': 'D√âCEMBRE',
            'DECEMBRE': 'D√âCEMBRE',
            'DEC': 'D√âCEMBRE',
            'DECEMBER': 'D√âCEMBRE',
            
            'T4': 'T4',
            'TRIM4': 'T4',
            'TRIMESTRE4': 'T4',
            
            'TOTAUX': 'TOTAUX',
            'TOTAL': 'TOTAUX',
            'TOTALS': 'TOTAUX',
            'GRAND TOTAL': 'TOTAUX'
        }
        
        # Mots-cl√©s pour la d√©tection automatique de l'en-t√™te (avec toutes les variantes)
        self.header_keywords = [
            # Mois
            'JAN', 'JANVIER', 'JANUARY', 'JANV',
            'FEV', 'FEVRIER', 'FEBRUARY', 'F√âVRIER', 'FEB',
            'MARS', 'MARCH', 'MAR',
            'AVR', 'AVRIL', 'APRIL', 'APR',
            'MAI', 'MAY',
            'JUIN', 'JUNE', 'JUN',
            'JUL', 'JUILLET', 'JULY',
            'AOUT', 'AO√õT', 'AUGUST', 'AUG',
            'SEPT', 'SEPTEMBRE', 'SEPTEMBER', 'SEP',
            'OCT', 'OCTOBRE', 'OCTOBER',
            'NOV', 'NOVEMBRE', 'NOVEMBER',
            'DEC', 'DECEMBRE', 'DECEMBER', 'D√âCEMBRE',
            
            # Trimestres/Semestres
            'T1', 'TRIM1', 'TRIMESTRE1',
            'T2', 'TRIM2', 'TRIMESTRE2',
            'T3', 'TRIM3', 'TRIMESTRE3',
            'T4', 'TRIM4', 'TRIMESTRE4',
            'S1', 'SEMESTRE1',
            'S2', 'SEMESTRE2',
            
            # Totaux
            'TOTAUX', 'TOTAL', 'TOTALS', 'GRAND TOTAL',
            
            # Autres
            'PAGE', 'SERVICE', 'DESCRIPTION', 'Unnamed: 1'
        ]
        self.header_keywords_upper = [kw.upper() for kw in self.header_keywords]

    def _standardiser_nom_service(self, nom: str) -> str:
        """Standardise le nom du service selon le mapping d√©fini."""
        nom = str(nom).strip()
        for pattern, standard in self.SERVICE_STANDARD.items():
            if re.search(pattern, nom, re.IGNORECASE):
                return standard
        return nom

    def _extract_year_from_filename(self, file_path):
        """Tente d'extraire l'ann√©e (quatre chiffres) du nom du fichier."""
        filename = Path(file_path).stem
        match = re.search(r'(\d{4})', filename)
        if match:
            return match.group(1)
        return None

    def _detect_header_row(self, file_path):
        """D√©tecte dynamiquement la ligne d'en-t√™te dans le fichier Excel."""
        print("üîç D√©tection dynamique de la ligne d'en-t√™te...")
        temp_df = pd.read_excel(file_path, sheet_name=0, header=None, nrows=10, engine='openpyxl')

        best_row_index = -1
        max_matches = 0

        for i in range(len(temp_df)):
            # Convertir les valeurs de la ligne en string et majuscules pour la comparaison
            row_values = [str(x).strip().upper() for x in temp_df.iloc[i].dropna().tolist()]
            
            current_matches = sum(1 for kw in self.header_keywords_upper if kw in row_values)
            
            # Bonus pour les lignes contenant les mots-cl√©s typiques des en-t√™tes de donn√©es
            if ('TOTAUX' in row_values or 'TOTAL' in row_values) and \
               (('JANVIER' in row_values or 'JAN' in row_values or 'T1' in row_values)):
                current_matches += 10 # Augmenter le score pour une meilleure d√©tection

            if current_matches > max_matches:
                max_matches = current_matches
                best_row_index = i
        
        if best_row_index != -1 and max_matches > 2:
            print(f"‚úÖ Ligne d'en-t√™te d√©tect√©e √† l'index: {best_row_index} (Excel Row: {best_row_index + 1}) avec {max_matches} correspondances.")
            return best_row_index
        else:
            print("‚ö†Ô∏è Impossible de d√©tecter automatiquement la ligne d'en-t√™te avec suffisamment de confiance. Essai avec l'index par d√©faut (ligne 2, index 1).")
            return 1 # Fallback au comportement pr√©c√©dent pour les fichiers 2023/2024 si la d√©tection √©choue

    def _find_service_column_name(self):
        """
        Identifie dynamiquement le nom de la colonne contenant les descriptions de service.
        Priorise 'Unnamed: 1' si elle contient des descriptions textuelles,
        sinon, cherche la colonne la plus textuelle (non-num√©rique, non-'PAGE').
        """
        if self.original_data is None:
            return None

        # 1. Prioriser 'Unnamed: 1' si elle existe et contient des strings descriptifs
        if 'Unnamed: 1' in self.original_data.columns:
            sample_values = self.original_data['Unnamed: 1'].dropna().head(10)
            # V√©rifier si au moins une valeur contient des lettres (non purement num√©rique)
            if any(isinstance(x, str) and re.search(r'[a-zA-Z]', x) for x in sample_values):
                print(f"‚úÖ Colonne de service identifi√©e par priorit√©: 'Unnamed: 1'")
                return 'Unnamed: 1'
        
        # 2. Fallback: Chercher la colonne la plus textuelle parmi toutes les colonnes
        print("üîç Recherche de la colonne de service la plus textuelle parmi toutes les colonnes...")
        best_service_col = None
        max_text_count = -1

        for col_name in self.original_data.columns:
            if pd.isna(col_name) or str(col_name).strip() == '':
                continue
            if str(col_name).strip().upper() == 'PAGE': # La colonne PAGE contient des num√©ros de page, pas des services
                continue
            
            text_count = 0
            sample_col = self.original_data[col_name].dropna().head(20)
            
            for val in sample_col:
                # Si la valeur est une cha√Æne et contient des lettres, on la compte
                if isinstance(val, str) and re.search(r'[a-zA-Z]', val):
                    text_count += 1
                # Si c'est num√©rique ou NaN, on l'ignore pour cette d√©tection
                elif pd.api.types.is_numeric_dtype(type(val)) or pd.isna(val):
                    pass
            
            if text_count > max_text_count:
                max_text_count = text_count
                best_service_col = col_name

        if best_service_col and max_text_count > 0:
            print(f"‚úÖ Colonne de service identifi√©e par analyse de contenu: '{best_service_col}' (avec {max_text_count} valeurs textuelles)")
            return best_service_col
        else:
            print("‚ùå Impossible de trouver une colonne de service textuelle ad√©quate. La colonne 'service' risque d'√™tre incorrecte.")
            # Dernier recours: si tout le reste √©choue, prend la premi√®re colonne non num√©rique et non 'PAGE'
            for col_name in self.original_data.columns:
                if pd.isna(col_name) or str(col_name).strip() == '' or str(col_name).strip().upper() == 'PAGE':
                    continue
                # V√©rifier si la colonne n'est pas purement num√©rique sur un √©chantillon
                if not all(isinstance(x, (int, float)) or pd.isna(x) for x in self.original_data[col_name].dropna().head(5)):
                    print(f"‚ö†Ô∏è Fallback ultime: Utilisation de la colonne '{col_name}' comme colonne de service par d√©faut.")
                    return col_name
            return None


    def load_original_data(self, file_path):
        """Charge le fichier Excel avec la structure sp√©cifique et extrait l'ann√©e."""
        try:
            print(f"üìñ Chargement des donn√©es Excel: {file_path}")
            
            # Tenter d'extraire l'ann√©e du nom du fichier
            self.year = self._extract_year_from_filename(file_path)
            if self.year:
                print(f"üéâ Ann√©e d√©tect√©e dans le nom du fichier: {self.year}")
            else:
                print("‚ö†Ô∏è Aucune ann√©e d√©tect√©e dans le nom du fichier. Utilisation de 'inconnu'.")
                self.year = "inconnu"

            # D√©tecter dynamiquement la ligne d'en-t√™te
            self.header_row_index = self._detect_header_row(file_path)

            # Lire le fichier Excel avec les param√®tres dynamiques
            self.original_data = pd.read_excel(
                file_path, 
                sheet_name=0,
                header=self.header_row_index, # Utiliser l'index d'en-t√™te d√©tect√©
                engine='openpyxl'
            )
            
            print(f"‚úÖ Donn√©es charg√©es avec succ√®s!")
            print(f"   - Shape: {self.original_data.shape}")
            print(f"   - Lignes: {len(self.original_data)}")
            print(f"   - Colonnes: {len(self.original_data.columns)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement: {str(e)}")
            return False
    
    def analyze_structure(self):
        """Analyse la structure des donn√©es Excel charg√©es"""
        if self.original_data is None:
            print("‚ùå Aucune donn√©e charg√©e. Veuillez charger les donn√©es d'abord.")
            return
            
        print("\nüîç ANALYSE DE LA STRUCTURE EXCEL")
        print("=" * 50)
        
        # Afficher les noms de colonnes
        print("Colonnes d√©tect√©es:")
        for i, col in enumerate(self.original_data.columns):
            print(f"   Colonne {i}: '{col}'")
        
        # Identifier la colonne des services en utilisant la nouvelle logique
        service_col = self._find_service_column_name()
        
        if service_col:
            print(f"\nColonne services identifi√©e: '{service_col}'")
            
            services = self.original_data[service_col].dropna()
            services = services[services.astype(str).str.strip() != '']
            print(f"Services avec donn√©es: {len(services)}")
            
            print("Premiers services:")
            for i, service in enumerate(services.head(10)):
                print(f"   {i+1}. {service}")
        else:
            print("\n‚ùå Aucune colonne de service n'a pu √™tre identifi√©e.")

        print(f"\nPremi√®res lignes:")
        print(self.original_data.head())
    
    def transform_data(self):
        """Transforme les donn√©es Excel au format CSV requis"""
        if self.original_data is None:
            print("‚ùå Aucune donn√©e charg√©e. Veuillez charger les donn√©es d'abord.")
            return False
            
        try:
            print("\nüîÑ TRANSFORMATION DES DONN√âES")
            print("=" * 50)
            
            # Identifier la colonne des services
            service_col = self._find_service_column_name()
            
            if service_col is None:
                print("‚ùå Impossible d'identifier la colonne des services pour la transformation.")
                return False
                
            print(f"‚úÖ Colonne services identifi√©e: '{service_col}'")
            
            transformed_rows = []
            
            for index, row in self.original_data.iterrows():
                service_name = row[service_col]
                
                # Ignorer les lignes sans nom de service, les lignes "PAGE" ou celles dont le service est num√©rique
                if pd.isna(service_name) or \
                   str(service_name).strip() == '' or \
                   str(service_name).strip().upper() == 'PAGE' or \
                   (isinstance(service_name, (int, float)) and not pd.isna(service_name)):
                    continue
                
                # Standardiser le nom du service
                service_std = self._standardiser_nom_service(service_name)
                transformed_row = {'service': service_std}
                
                # Nouvelle approche: mapper toutes les colonnes possibles
                for actual_df_col_name in self.original_data.columns:
                    # Ignorer la colonne service et les colonnes vides
                    if actual_df_col_name == service_col or pd.isna(actual_df_col_name) or str(actual_df_col_name).strip() == '':
                        continue
                    
                    # Trouver le nom CSV correspondant
                    csv_col_name = None
                    col_name_upper = str(actual_df_col_name).strip().upper()
                    
                    # Chercher dans le mapping
                    for excel_key, csv_value in self.column_mapping.items():
                        if excel_key.upper() == col_name_upper:
                            csv_col_name = csv_value
                            break
                    
                    # Si non trouv√©, ignorer cette colonne
                    if csv_col_name is None:
                        continue
                    
                    # Traiter la valeur
                    value = row[actual_df_col_name]
                    if pd.isna(value):
                        transformed_row[csv_col_name] = 0.0
                    else:
                        try:
                            clean_value = str(value).replace(',', '').replace(' ', '').strip()
                            transformed_row[csv_col_name] = float(clean_value) if clean_value else 0.0
                        except (ValueError, TypeError):
                            transformed_row[csv_col_name] = 0.0
                
                # Ne conserver que les services cl√©s
                if service_std in self.SERVICES_CLES:
                    transformed_rows.append(transformed_row)
            
            self.transformed_data = pd.DataFrame(transformed_rows)
            
            # === D√âBUT DE LA CORRECTION ===
            # Cr√©er une liste de colonnes uniques et ordonn√©es pour le DataFrame final
            unique_expected_columns = ['service']
            for csv_col_name in self.column_mapping.values():
                if csv_col_name not in unique_expected_columns:
                    unique_expected_columns.append(csv_col_name)

            # Assurer que toutes les colonnes attendues existent dans le DataFrame, en les initialisant √† 0.0 si elles manquent.
            for col_name_to_check in unique_expected_columns:
                if col_name_to_check not in self.transformed_data.columns:
                    self.transformed_data[col_name_to_check] = 0.0
            
            # R√©ordonner les colonnes du DataFrame pour correspondre √† l'ordre unique attendu
            self.transformed_data = self.transformed_data[unique_expected_columns]
            # === FIN DE LA CORRECTION ===
            
            print(f"‚úÖ Transformation termin√©e! Services cl√©s conserv√©s: {len(self.transformed_data)}")
            print(f"   - Colonnes: {list(self.transformed_data.columns)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la transformation: {str(e)}")
            import traceback
            traceback.print_exc()
            return False
    
    def validate_transformed_data(self):
        """Valide les donn√©es transform√©es"""
        if self.transformed_data is None:
            print("‚ùå Aucune donn√©e transform√©e disponible.")
            return False
            
        print("\n‚úÖ VALIDATION DES DONN√âES")
        print("=" * 50)
        
        # V√©rifier les services cl√©s
        found_services = []
        for service in self.SERVICES_CLES:
            matches = self.transformed_data[
                self.transformed_data['service'] == service
            ]
            if len(matches) > 0:
                found_services.append(service)
                print(f"‚úÖ Service cl√© trouv√©: {service}")
            else:
                print(f"‚ö†Ô∏è Service cl√© non trouv√©: {service}")
        
        # Afficher un √©chantillon des donn√©es
        print(f"\nüìä √âchantillon des donn√©es transform√©es:")
        print(self.transformed_data.head())
        
        # V√©rifier les types de donn√©es
        print(f"\nüìã Types de donn√©es:")
        for col in self.transformed_data.columns:
            dtype = self.transformed_data[col].dtype
            sample_val = self.transformed_data[col].iloc[0] if len(self.transformed_data) > 0 else 'N/A'
            print(f"   {col}: {dtype} (exemple: {sample_val})")
        
        # V√©rifier les totaux
        if 'TOTAUX' in self.transformed_data.columns:
            total_sum = self.transformed_data['TOTAUX'].sum()
            print(f"\nüìà Somme des totaux: {total_sum:,.0f}")
        
        # La validation r√©ussit si au moins une partie des services cl√©s est trouv√©e.
        return len(found_services) >= 5 # Au moins 5 services cl√©s trouv√©s

    
    def save_transformed_data(self, output_path=None):
        """Sauvegarde les donn√©es transform√©es au format CSV en incluant l'ann√©e."""
        if self.transformed_data is None:
            print("‚ùå Aucune donn√©e transform√©e √† sauvegarder.")
            return False
            
        try:
            if self.year:
                output_filename = f'LBS_matrice_{self.year}_cleaned.csv'
            else:
                output_filename = 'LBS_matrice_cleaned.csv'
            
            if output_path is None:
                output_path = output_filename
            
            print(f"\nüíæ Sauvegarde des donn√©es: {output_path}")
            
            self.transformed_data.to_csv(output_path, index=False, encoding='utf-8')
            
            print(f"‚úÖ Donn√©es sauvegard√©es avec succ√®s!")
            print(f"   - Fichier: {output_path}")
            print(f"   - Taille: {os.path.getsize(output_path)} bytes")
            print(f"   - Lignes: {len(self.transformed_data)}")
            print(f"   - Colonnes: {len(self.transformed_data.columns)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {str(e)}")
            return False
    
    def generate_summary_report(self):
        """G√©n√®re un rapport de r√©sum√© de la transformation"""
        if self.transformed_data is None:
            print("‚ùå Aucune donn√©e transform√©e disponible pour le rapport.")
            return
            
        print("\nüìà RAPPORT DE TRANSFORMATION")
        print("=" * 50)
        
        total_services = len(self.transformed_data)
        
        # Rechercher les totaux des services cl√©s
        consultants_row = self.transformed_data[
            self.transformed_data['service'].str.contains('Nb Consultants', case=False, na=False)
        ]
        consultations_row = self.transformed_data[
            self.transformed_data['service'].str.contains('Nb Consultations', case=False, na=False)
        ]
        
        total_consultants = consultants_row['TOTAUX'].sum() if not consultants_row.empty else 0
        total_consultations = consultations_row['TOTAUX'].sum() if not consultations_row.empty else 0
        
        print(f"üìä M√©triques cl√©s (Ann√©e: {self.year if self.year else 'N/A'}):")
        print(f"   - Services transform√©s: {total_services}")
        print(f"   - Total consultants: {total_consultants:,.0f}")
        print(f"   - Total consultations: {total_consultations:,.0f}")
        if total_consultants > 0:
            print(f"   - Consultations par consultant: {total_consultations/total_consultants:.2f}")
        
        print(f"\n‚úÖ Donn√©es pr√™tes pour analytique_sante!")


def main():
    """Fonction principale d'ex√©cution"""
    print("üè• HEALTHCARE EXCEL TO CSV TRANSFORMER - VERSION 2025")
    print("=" * 70)
    print("Transforme les donn√©es Excel LBS vers le format CSV analytique_sante")
    print("Identifie automatiquement l'ann√©e et la ligne d'en-t√™te.")
    print()
    
    transformer = HealthcareExcelTransformer()
    
    if len(sys.argv) > 1:
        input_file = sys.argv[1]
    else:
        possible_files = [
            'LBS_matrice_2024.xlsx',
            'matrice_2024.xlsx',
            'LBS_matrice.xlsx',
            'healthcare_data.xlsx',
            'LBS_matrice_2023.xlsx',
            'LBS_matrice_2025.xlsx',
            'LBS_matrice_2020.xlsx'
        ]
        
        input_file = None
        for file in possible_files:
            if os.path.exists(file):
                input_file = file
                break
        
        if input_file is None:
            print("‚ùå Aucun fichier Excel trouv√©. Sp√©cifiez le chemin:")
            print("   python csv_transformer_script.py <chemin_vers_fichier.xlsx>")
            print()
            print("Ou placez un de ces fichiers dans le r√©pertoire courant:")
            for file in possible_files:
                print(f"   - {file}")
            return
    
    if not os.path.exists(input_file):
        print(f"‚ùå Fichier non trouv√©: {input_file}")
        return
    
    steps = [
        ("Chargement des donn√©es Excel", lambda: transformer.load_original_data(input_file)),
        ("Analyse de la structure", lambda: transformer.analyze_structure() or True),
        ("Transformation des donn√©es", lambda: transformer.transform_data()),
        ("Validation des r√©sultats", lambda: transformer.validate_transformed_data()),
        ("Sauvegarde CSV", lambda: transformer.save_transformed_data()),
        ("G√©n√©ration du rapport", lambda: transformer.generate_summary_report() or True)
    ]
    
    print("üöÄ D√âMARRAGE DU PIPELINE DE TRANSFORMATION")
    print("=" * 70)
    
    for step_name, step_func in steps:
        print(f"\n‚è≥ {step_name}...")
        try:
            result = step_func()
            if result is False:
                print(f"‚ùå √âchec √† l'√©tape: {step_name}")
                return
        except Exception as e:
            print(f"‚ùå Erreur dans {step_name}: {str(e)}")
            import traceback
            traceback.print_exc()
            return
    
    print("\nüéâ TRANSFORMATION TERMIN√âE AVEC SUCC√àS!")
    print("=" * 70)
    print("‚úÖ Vos donn√©es sont pr√™tes pour analytique_sante!")
    print(f"‚úÖ Le fichier g√©n√©r√© sera nomm√© 'LBS_matrice_{transformer.year}_cleaned.csv' (ou 'LBS_matrice_cleaned.csv' si l'ann√©e est inconnue)")
    print()
    print("Prochaines √©tapes:")
    print("1. V√©rifiez le fichier CSV g√©n√©r√©")
    print("2. Lancez analytique_sante avec le nouveau fichier")
    print("3. Le format est compatible avec votre tableau de bord existant")


if __name__ == "__main__":
    main()